---
layout: post
title:  "[LeetCode 101. Symmetric Tree"
date:   2016-09-04 14:12:26
categories: Leetcode
tags: Leetcode Tree
---

* content
{:toc}


# [LeetCode 101. Symmetric Tree](https://leetcode.com/problems/symmetric-tree/) #

> Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

>For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

```
    1
   / \
  2   2
 / \ / \
3  4 4  3
```
> But the following [1,2,2,null,3,null,3] is not:

```
    1
   / \
  2   2
   \   \
   3    3
```

# 分析 #
题意要求判断一颗二叉树是否是镜像，类似这样的题用递归思想来理解是比较直观的，而且代码也可以写得很优雅。


```
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSymmetric(self, root):
        def sym_tree(L,R):
            if L and R: 
                return L.val == R.val and sym_tree(L.left, R.right) and sym_tree(L.right, R.left)
            else:
                return L == R
        return sym_tree(root, root)
```
