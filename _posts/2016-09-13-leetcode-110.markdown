---
layout: post
title:  "LeetCode 110. Balanced Binary Tree"
date:   2016-09-13 20:07:26
categories: LeetCode
tags: LeetCode Tree
---

* content
{:toc}
判断二叉树是否是平衡二叉树。




# [LeetCode 101. Balanced Binary Tree](https://leetcode.com/problems/balanced-binary-tree/) #

> Given a binary tree, determine if it is height-balanced.
> For this problem, a height-balanced binary tree is defined as a binary tree in which the  depth of the two subtrees of every node never differ by more than 1.



# 自顶向下 #
可以直接根据平衡二叉树来写代码，这种做法代码比较直接，但是时间复杂度是O(N^2)。


```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSymmetric(self, root):
        def sym_tree(L,R):
            if L and R: 
                return L.val == R.val and sym_tree(L.left, R.right) and sym_tree(L.right, R.left)
            else:
                return L == R
        return sym_tree(root, root)
```

# 自底向上

也可以使用DFS算法，首先搜索到最末端的节点，然后再逐层向上，这样的话每个节点的高度只需要计算一次，时间复杂度是O(N)。

```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        return self.depth(root) != -1

    def depth(self, root):
        if root is None:
            return 0

        left_depth = self.depth(root.left)
        if left_depth == -1:
            return -1

        right_depth = self.depth(root.right)

        if right_depth == -1:
            return -1

        if abs(left_depth - right_depth) > 1:
            return -1

        return max(left_depth, right_depth) + 1
```

