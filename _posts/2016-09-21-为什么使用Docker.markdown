---
layout: post
title:  "为什么要使用Docker？ "
date:   2016-09-21 15:17:26
categories: Docker
tags: Docker
---

* content
{:toc}
关于微服务和Docker。




# Docker 是什么？ #

简答来说，Docker是一种轻量级的操作系统虚拟方案。Docker的优点很多，其中最突出的一点就是轻，轻得就像一叶扁舟漂在大海上，而其他的虚拟化方案都石沉大海。

> Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 [GitHub](https://github.com/docker/docker) 上进行维护。
Docker 开源之后立即吸引了大量的注意力，程序员、架构师纷纷揭竿而起，成了Docker的拥趸。程序员的眼睛是雪亮，Docker 的火爆，也正说明 Docker 是人民的选择。我们来回归一下，在 Docker 诞生之前，程序员受到虚拟机怎样的折磨。



# 传统虚拟机和Docker

| 特性    | 容器        | 虚拟机    |
| ----- | --------- | ------ |
| 启动    | 秒级        | 分钟级    |
| 硬盘使用  | 一般为 MB    | 一般为 GB |
| 性能    | 接近原生      | 弱于     |
| 系统支持量 | 单机支持上千个容器 | 一般几十个  |

无论是性能、效率、还是资源占用上，Docker比传统虚拟机都有非常明显的优势。这还只是其中很小一部分。对于生产环境中的虚拟机，我们对它的要求可不仅限于性能、效率和资源占用。我们还要考虑制作、分发、部署、管理是否方便快捷、是否可以自动化。应用环境的管理成本越低，就可以投入更多的资源到更有价值是事情上，比如需求分析、产品设计、用户运营。



# Docker 的优势

### 更快速的交付和部署

> 对开发和运维（devop）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。
>
> 开发者可以使用一个标准的镜像来构建一套开发容器，开发完成之后，运维人员可以直接使用这个容器来部署代码。 Docker 可以快速创建容器，快速迭代应用程序，并让整个过程全程可见，使团队中的其他成员更容易理解应用程序是如何创建和工作的。 Docker 容器很轻很快！容器的启动时间是秒级的，大量地节约开发、测试、部署的时间。

### 更高效的虚拟化

> Docker 容器的运行不需要额外的 hypervisor 支持，它是内核级的虚拟化，因此可以实现更高的性能和效率。

### 更轻松的迁移和扩展

> Docker 容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。 这种兼容性可以让用户把一个应用程序从一个平台直接迁移到另外一个。
>

### 更简单的管理

> 使用 Docker，只需要小小的修改，就可以替代以往大量的更新工作。所有的修改都以增量的方式被分发和更新，从而实现自动化并且高效的管理。Docker 可以使用仓库来统一管理镜像，就像Github管理代码一样管理镜像。
>



# Docker 基本概念

### 镜像（Image）

> Docker 镜像（Image）就是一个只读的模板。
>
> 例如：一个镜像可以包含一个完整的 ubuntu 操作系统环境，里面仅安装了 Apache 或用户需要的其它应用程序。
>
> 镜像可以用来创建 Docker 容器。
>
> Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。

就好像我们运行一个程序，当程序运行起来了就变成了一个进程。但是程序本身是一个只读模板。我们可以从别人那里拷贝一份程序，或者自己写一个程序，这个程序就相当于镜像，而运行起来的进程就相当于容器。

## Docker 容器

> Docker 利用容器（Container）来运行应用。
>
> 容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。
>
> 可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。

## Docker 仓库

> 仓库（Repository）是集中存放镜像文件的场所。有时候会把仓库和仓库注册服务器（Registry）混为一谈，并不严格区分。实际上，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。
>
> 当用户创建了自己的镜像之后就可以使用 `push` 命令将它上传到公有或者私有仓库，这样下次在另外一台机器上使用这个镜像时候，只需要从仓库上 `pull` 下来就可以了。
>



# 为什么使用Docker

Docker 封装的容器技术，带来了更高的生产效率，同时降低了使用成本。另外，Docker本身的技术门槛很低，各技术层次的人都可以从中受益。
